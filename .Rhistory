ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = 'blue'))
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Load packages
library("dplyr")
library("ggmap")
install.packages('ggmap')
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
install.packages("rsconnect")
install.packages("Rtools")
library(ggplot2)
library(dplyr)
library(leaflet)
library(plotly)
# load in data frame (from ggplot package)
mid_data <- data.frame(midwest) %>%
na.omit()
poverty_college_plot <- function (xcoll, ycoll, color) {
result <- plot_ly(
data = mid_data,
x = ~mid_data[[xcoll]],
y = ~mid_data[[ycoll]],
type = "scatter",
mode = "markers",
color = ~mid_data[[color]]
) %>%
layout(
xaxis = list(title = xcoll),
yaxis = list(title = ycoll)
)
}
get_pov_col <- function(xcoll, ycoll, color) {
return(poverty_college_plot(xcoll, ycoll, color))
}
states <- subset(mid_data, mid_data$)
library(textreadr)
summary_txt <- stri_read_lines("words/SummaryPage.html")
summary_html <- HTML(summary_txt)
View(mid_data)
states <- subset(mid_data, mid_data$state)
states <- mid_data %>%
group_by(state) %>%
select(state)
View(states)
states <- mid_data %>%
unique(state)
states <- mid_data %>%
group_by(state) %>%
select(unique())
states <- mid_data %>%
group_by(state) %>%
select(unique(state))
states <- mid_data %>%
group_by(state) %>%
select(unique(1))
states <- mid_data %>%
group_by(state) %>%
summarise()
View(states)
states <- mid_data %>%
group_by(state) %>%
summarise()
leaflet(states) %>%
addPolygons(color = "red", weight = 1, smoothFactor = .5,
opacity = 1, fillOpacity = .5)
library(ggmap)
library(ggmap2)
library(ggmap)
mid_map <- qmap(location = "Midwest, United States")
mid_map <- qmap(location = "Midwest, United States", source = "google")
google_key <- AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY
google_key <- AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY
google_key <- "AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
("api_keys.R")
register_google(key = google_key, write = T)
GGMAP_GOOGLE_API_KEY='AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
GGMAP_GOOGLE_API_KEY='AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
GGMAP_GOOGLE_API_KEY <- "AIzaSyDT7k0-QZ5BhWjvra0m1YvHCgUlKWjLyYY"
mid_map <- qmap(location = "Midwest, United States", source = "google")
mid_map <- qmap(location = "Midwest, United States", source = "google")
mid_map <- get_map(location = "Midwest, United States", source = "google")
mid_map <- get_map(location = "Midwest, United States", source = "google", zoom = 3)
mid_map <- get_map(location = "texas", source = "google", zoom = 3)
# shinyApp object to be run with app_server.R and app_ui.R
shinyApp(server = my_server, ui = my_ui)
install.packages("googlesheets")
library(googlesheets)
gs_auth(new_user = T)
install.packages("googlesheets4")
library(googlesheets4)
sheets_auth(email = "graueryan@gmail.com")
detach("package:googlesheets", unload = TRUE)
sheets_browse()
library(googledrive)
sheets_browse("test")
sheets_browse("test")
sheets_browse("https://docs.google.com/spreadsheets/d/1f6_ReC-uxhX1_fH1WUSTbIRhf7bmDT4kZGdsbyCt7d4/edit#gid=0")
data <- sheets_read("https://docs.google.com/spreadsheets/d/1f6_ReC-uxhX1_fH1WUSTbIRhf7bmDT4kZGdsbyCt7d4/edit#gid=0")
is.data.frame(data)
library(shiny)
setwd("C:/Users/graue/projects/internship/internship-proposal")
header <- dashboardHeader( title = "simple dashboard", uiOutput("logoutbtn"))
library(shinydashboard)
library(shinyjs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
source("app_server.r")
source("app_ui.r")
shinyApp(ui = ui, server = server)
server <- function(input, output) {
}
library(shiny)
landing_page <- tabPanel(
fluidPage(theme = "mysyle.css",
includeHTML("text/intro_text.html"))
)
ui <- navbarPage(
landing_page
)
library(shiny)
source("app_server.r")
source("app_ui.r")
shinyApp(ui = ui, server = server)
landing_page <- tabPanel(
fluidPage(
includeCSS("www/mystyle.css"),
includeHTML("text/intro_text.html")
)
)
ui <- navbarPage(
landing_page
)
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/graue/projects/internship/internship-proposal")
runApp()
runApp()
setwd("C:/Users/graue/projects/internship/internship-proposal")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
server <- function(input, output, session) {
output$sidebarpanel <- renderUI({
sidebarMenu(
menuItem("Main Page", tabName = "Home", icon = icon("dashboard"), selected = TRUE)
)
})
output$body <- renderUI({
tabItems(
tabItem(tabName = "Home",
includeCSS("mystyle.css"),
includeHTML("text/intro_text.html")
)
)
})
}
library(shinydashboard)
library(shinyjs)
header <- dashboardHeader( title = "simple dashboard")
sidebar <- dashboardSidebar(uiOutput("sidebarpanel"))
body <- dashboardBody(shinyjs::useShinyjs(), uiOutput("body"))
ui<-dashboardPage(header, sidebar, body, skin = "green")
library(shiny)
source("app_server.r")
source("app_ui.r")
shinyApp(ui = ui, server = server)
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
source("scripts/mock_report.R")
knitr::opts_chunk$set(echo = TRUE)
source("../scripts/mock_report.R")
library(mongolite)
library(dplyr)
library(plotly)
# retrieves data from mongdb database
sale <- mongo(collection = "sale", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
custy <- mongo(collection = "custy", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
item <- mongo(collection = "item", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
# organizes mongodb enviroments into r dataframes
sale_data <- sale$find()
custy_data <- custy$find()
item_data <- item$find()
total_sales_per_item <- sale_data %>%
group_by(item_id) %>%
summarise(total = n()) %>%
mutate("prices" = item_data["price"][which(sale_data$item_id == item_data$item_id),]) %>%
mutate("total price" = total * prices)
total_sales <- total_sales_per_item %>%
summarise(sum(total_sales_per_item$`total price`)) %>%
pull()
total_sale_per_custy <- sale_data %>%
mutate("price" = matcher()) %>%
group_by(cust_id) %>%
summarise(sum(price))
n_sale_per_item <- sale_data %>%
group_by(item_id) %>%
summarise("total" = n())
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar"
)
matcher <- function() {
result <- c()
for (i in sale_data$item_id) {
result <- c(result, item_data["price"][which(i == item_data$item_id),])
}
return(result)
}
library(mongolite)
library(dplyr)
library(plotly)
# retrieves data from mongdb database
sale <- mongo(collection = "sale", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
custy <- mongo(collection = "custy", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
item <- mongo(collection = "item", url = "mongodb+srv://rgraue:LoopDLoop@geoffcluster-3sd9t.azure.mongodb.net/report")
# organizes mongodb enviroments into r dataframes
sale_data <- sale$find()
custy_data <- custy$find()
item_data <- item$find()
matcher <- function() {
result <- c()
for (i in sale_data$item_id) {
result <- c(result, item_data["price"][which(i == item_data$item_id),])
}
return(result)
}
total_sales_per_item <- sale_data %>%
group_by(item_id) %>%
summarise(total = n()) %>%
mutate("prices" = item_data["price"][which(sale_data$item_id == item_data$item_id),]) %>%
mutate("total price" = total * prices)
total_sales <- total_sales_per_item %>%
summarise(sum(total_sales_per_item$`total price`)) %>%
pull()
total_sale_per_custy <- sale_data %>%
mutate("price" = matcher()) %>%
group_by(cust_id) %>%
summarise(sum(price))
n_sale_per_item <- sale_data %>%
group_by(item_id) %>%
summarise("total" = n())
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar"
)
knitr::opts_chunk$set(echo = TRUE)
source("../scripts/mock_report.R")
kable(sale_data)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(dplyr)
library(tidyverse)
library(plotly)
library(anchors)
source("../scripts/mock_report.R")
kable(sale_data)
kable(custy_data)
kable(item_data)
View(total_sale_per_custy)
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar",
) %>%
layout(
Title = "Number of sales per Item",
xaxis = list(title = "Item UB code"),
yaxis = list(title = "NUmber of items sold")
)
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar"
) %>%
layout(
Title = "Number of sales per Item",
xaxis = list(title = "Item UB code"),
yaxis = list(title = "NUmber of items sold")
)
item_sale_visual
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar"
) %>%
layout(
title = "Number of sales per Item",
xaxis = list(title = "Item UB code"),
yaxis = list(title = "NUmber of items sold")
)
item_sale_visual
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar"
) %>%
layout(
title = "Number of sales per Item",
xaxis = list(title = "Item EB code"),
yaxis = list(title = "NUmber of items sold")
)
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar",
color = "green"
) %>%
layout(
title = "Number of sales per Item",
xaxis = list(title = "Item EB code"),
yaxis = list(title = "NUmber of items sold")
)
item_sale_visual
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar"
) %>%
layout(
title = "Number of sales per Item",
xaxis = list(title = "Item EB code"),
yaxis = list(title = "NUmber of items sold"),
color = "green"
)
item_sale_visual
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))
) %>%
layout(
title = "Number of sales per Item",
xaxis = list(title = "Item EB code"),
yaxis = list(title = "NUmber of items sold")
)
item_sale_visual
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar",
marker = list(color = 'rgb(0,202,0)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))
) %>%
layout(
title = "Number of sales per Item",
xaxis = list(title = "Item EB code"),
yaxis = list(title = "NUmber of items sold")
)
item_sale_visual
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar",
marker = list(color = 'rgb(0,102,0)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))
) %>%
layout(
title = "Number of sales per Item",
xaxis = list(title = "Item EB code"),
yaxis = list(title = "NUmber of items sold")
)
item_sale_visual
item_sale_visual <- plot_ly(
data = total_sales_per_item,
x = ~item_id,
y = ~total,
type = "bar",
marker = list(color = 'rgb(0,132,0)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))
) %>%
layout(
title = "Number of sales per Item",
xaxis = list(title = "Item EB code"),
yaxis = list(title = "NUmber of items sold")
)
item_sale_visual
runApp()
source("scripts/mock_report.R")
server <- function(input, output, session) {
output$sidebarpanel <- renderUI({
sidebarMenu(
menuItem("Main Page", tabName = "Home", icon = icon("dashboard"), selected = TRUE),
menuItem("Mock Report", tabName = "report", icon("analytics"))
)
})
output$body <- renderUI({
tabItems(
tabItem(tabName = "Home",
includeHTML("text/intro_text.html")
),
tabItem(tabName = "report",
includeMarkdown("text/report.Rmd")
)
)
})
}
library(shinydashboard)
library(shinyjs)
header <- dashboardHeader( title = "simple dashboard")
sidebar <- dashboardSidebar(uiOutput("sidebarpanel"))
body <- dashboardBody(shinyjs::useShinyjs(), uiOutput("body"))
ui<-dashboardPage(header, sidebar, body, skin = "green")
runApp()
runApp()
setwd("C:/Users/graue/projects/internship/internship-proposal")
shiny::runApp()
runApp()
runApp()
runApp()
